{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"DaSCH Organizational Handbook This is the DaSCH organizational handbook describing how we work.","title":"DaSCH Organizational Handbook"},{"location":"#dasch-organizational-handbook","text":"This is the DaSCH organizational handbook describing how we work.","title":"DaSCH Organizational Handbook"},{"location":"client-development/","text":"Client development team","title":"Client development team"},{"location":"client-development/#client-development-team","text":"","title":"Client development team"},{"location":"client-services/","text":"Client Services documentation","title":"Introduction"},{"location":"client-services/#client-services-documentation","text":"","title":"Client Services documentation"},{"location":"general/","text":"","title":"Introduction"},{"location":"research-development/","text":"Research & Development documentation Team organisation The R&D team is developing the DaSCH Service Platform, including backend and frontend. They are divided in several working groups where each group is working on one specific feature at a time. The team is using Youtrack to manage their tasks. Get more info about the Youtrack issue organisation Roadmap See the DSP roadmap on Youtrack.","title":"Research & Development documentation"},{"location":"research-development/#research-development-documentation","text":"","title":"Research &amp; Development documentation"},{"location":"research-development/#team-organisation","text":"The R&D team is developing the DaSCH Service Platform, including backend and frontend. They are divided in several working groups where each group is working on one specific feature at a time. The team is using Youtrack to manage their tasks. Get more info about the Youtrack issue organisation","title":"Team organisation"},{"location":"research-development/#roadmap","text":"See the DSP roadmap on Youtrack.","title":"Roadmap"},{"location":"research-development/working-group/","text":"DSP working group Description The R&D team has currently 3 working groups with 2 or more developers. Each group works on one epic from A to Z. A group defines the working tasks based on user story requirements. The group members organise themselves, who is doing what, in order to achieve their epic goal. During the DSP weekly meeting on Tuesdays, one representative of each group presents the work that has been fulfilled and their next steps for the upcoming week. Current groups Sepideh, Ben Marcin, Balduin Snehal, Mike, Flavie (part time), Andr\u00e9 (part time) Group logs not available","title":"DSP working group"},{"location":"research-development/working-group/#dsp-working-group","text":"","title":"DSP working group"},{"location":"research-development/working-group/#description","text":"The R&D team has currently 3 working groups with 2 or more developers. Each group works on one epic from A to Z. A group defines the working tasks based on user story requirements. The group members organise themselves, who is doing what, in order to achieve their epic goal. During the DSP weekly meeting on Tuesdays, one representative of each group presents the work that has been fulfilled and their next steps for the upcoming week.","title":"Description"},{"location":"research-development/working-group/#current-groups","text":"Sepideh, Ben Marcin, Balduin Snehal, Mike, Flavie (part time), Andr\u00e9 (part time)","title":"Current groups"},{"location":"research-development/working-group/#group-logs","text":"not available","title":"Group logs"},{"location":"research-development/youtrack-organization/","text":"YouTrack Issue Organization Overview The Research and Development team can visualize and manage their work issues inside the DaSCH Service Platform project on YouTrack . Issue Types For the project, the following issue types are defined. Theme / Initiative Describe categories in which issues are classified by relevant topic. Epic Describe a feature or a part of a feature that will be implemented over one or several iterations of work. An epic must deliver a workable piece of code (from backend to frontend). It is broken down and detailed by 2 types of issues: user stories and tasks. They are both complementary, at the same level in the issue hierarchy. User Story Describe a feature in an informal, non-technical language from the perspective of an end user. It contains a short but explicit description, the context, the contact person for questioning and mockups or prototypes. After reading a user story, the team knows what they are building, why they're building, and what value it creates. User stories are written by the product management team. Task Describe a part of a feature in a technical language. A task can be a new feature, an improvement or a bug fix. Tasks are written by developers based on the user story requirements. Workflow The Product Management (PM) team creates themes and epics based on the current roadmap and priorities. For each epic, one or several user stories are written following the defined template and added to the Youtrack board. For each epic, the relevant developers participate in a meeting with one of the PM members who explains the epic and the user stories. The developers then create one or several tasks with technical specifications based on the user story requirements. A task should be created for each subsystem involved. The workflow and the estimation of time are also defined. Templates User Story template Describe an iteration to achieve a working feature or a working part of it. It is written by the Product Management team, in an informal language, following this template: Who: \u201cAs a [persona*], --> Persona definition What: I want to [do something], Why: so that I can [solve a problem]\u201d Definition of done OR Expected behaviour Background information Contact person for questioning Additional information Corresponding Mockup and/or Prototype Once the user stories are clearly defined, they are visible for the entire team on Youtrack . Task template Describe any kind of work that needs to be done to implement a User Story or fix a Bug. The user story is broken down in a technical way into tasks which become part of the sprint backlog. Typically there is at least one task per involved subsystem and/or group of developers. A task, in contrast to a user story, is typically something like code this, design that, create test data for such-and-such, automate that, and so on. In general, tasks should have a time estimate and the effective time spent attached to it. Examples: Add route to DSP-API Add project members component to DSP-APP Add members list component to DSP-UI-LIB Add route to DSP-JS-LIB Add methods to DSP-PY-LIB Add unit tests to DSP-APP and DSP-UI-LIB Add feature documentation to DSP-DOCS Clean-up xy Add tests Bump version of library xyz Bug template Bug Template for YouTrack issues ) Describes a user facing defect. Bugs are prioritized (e.g., high, normal, low) issues which describe a defect in the DaSCH Service Platform. These defects can affect either the current released version or the next major version in development. If a bug affects the current released (deployed) version of the platform, then it is immediately put on the board of the running sprint. Bugs with a high priority should be solved during the running sprint, while normal and low priority bugs can be moved to the next sprint if necessary. Any bugs moved to the next sprint should be re-prioritized to \u201chigh\u201d if they are not already, thus making sure that they are not pushed back again. With two weeks per sprint, a high priority bug should thus be solved in those two weeks. A normal or low priority bug moved to the next sprint will thus be solved at the latest in 4 weeks. A bugfix release can then be planned, which will incorporate only the bug fixes. If a bug affects the current development version, i.e., the next major version in development, then it should be put on the board by the team during regular Sprint Planning and solved before the next major version of the platform is released. Subsystems The DaSCH Service Platform (DSP) consists of multiple subsystems. The subsystems usually live in their own Github repository. These are: DSP-API : https://github.com/dasch-swiss/dsp-api DSP-APP : https://github.com/dasch-swiss/dsp-app DSP-UI-LIB : https://github.com/dasch-swiss/dsp-ui-lib DSP-JS-LIB : https://github.com/dasch-swiss/dsp-js-lib DSP-TOOLS : https://github.com/dasch-swiss/dsp-tools DSP-DOCS : https://github.com/dasch-swiss/dsp-docs The DaSCH Service Platform has a global release schedule, for which then the individual subsystems need to be released. A user story consisting of tasks with hard dependencies (aka \u201cbreaking changes\u201d) can only be released as a whole. Tasks with soft dependencies (aka \u201cnon-breaking changes) can be released independently. Example Theme: Permissions Epic: Get and display permissions for a project (DSP-123) User Story: Display existing group permissions (incl. mockups) Task: Refactor hasPermissions object structure (Backend) Task: Get permissions from the API (Frontend) Task: Table view with groups and given permissions (Frontend) The organization between subsystems is done at the level of tasks as well as the dependencies. User Stories should be tagged with a future release, reflecting the global priorization.","title":"YouTrack Issue Organization"},{"location":"research-development/youtrack-organization/#youtrack-issue-organization","text":"","title":"YouTrack Issue Organization"},{"location":"research-development/youtrack-organization/#overview","text":"The Research and Development team can visualize and manage their work issues inside the DaSCH Service Platform project on YouTrack .","title":"Overview"},{"location":"research-development/youtrack-organization/#issue-types","text":"For the project, the following issue types are defined.","title":"Issue Types"},{"location":"research-development/youtrack-organization/#theme-initiative","text":"Describe categories in which issues are classified by relevant topic.","title":"Theme / Initiative"},{"location":"research-development/youtrack-organization/#epic","text":"Describe a feature or a part of a feature that will be implemented over one or several iterations of work. An epic must deliver a workable piece of code (from backend to frontend). It is broken down and detailed by 2 types of issues: user stories and tasks. They are both complementary, at the same level in the issue hierarchy.","title":"Epic"},{"location":"research-development/youtrack-organization/#user-story","text":"Describe a feature in an informal, non-technical language from the perspective of an end user. It contains a short but explicit description, the context, the contact person for questioning and mockups or prototypes. After reading a user story, the team knows what they are building, why they're building, and what value it creates. User stories are written by the product management team.","title":"User Story"},{"location":"research-development/youtrack-organization/#task","text":"Describe a part of a feature in a technical language. A task can be a new feature, an improvement or a bug fix. Tasks are written by developers based on the user story requirements.","title":"Task"},{"location":"research-development/youtrack-organization/#workflow","text":"The Product Management (PM) team creates themes and epics based on the current roadmap and priorities. For each epic, one or several user stories are written following the defined template and added to the Youtrack board. For each epic, the relevant developers participate in a meeting with one of the PM members who explains the epic and the user stories. The developers then create one or several tasks with technical specifications based on the user story requirements. A task should be created for each subsystem involved. The workflow and the estimation of time are also defined.","title":"Workflow"},{"location":"research-development/youtrack-organization/#templates","text":"","title":"Templates"},{"location":"research-development/youtrack-organization/#user-story-template","text":"Describe an iteration to achieve a working feature or a working part of it. It is written by the Product Management team, in an informal language, following this template: Who: \u201cAs a [persona*], --> Persona definition What: I want to [do something], Why: so that I can [solve a problem]\u201d Definition of done OR Expected behaviour Background information Contact person for questioning Additional information Corresponding Mockup and/or Prototype Once the user stories are clearly defined, they are visible for the entire team on Youtrack .","title":"User Story template"},{"location":"research-development/youtrack-organization/#task-template","text":"Describe any kind of work that needs to be done to implement a User Story or fix a Bug. The user story is broken down in a technical way into tasks which become part of the sprint backlog. Typically there is at least one task per involved subsystem and/or group of developers. A task, in contrast to a user story, is typically something like code this, design that, create test data for such-and-such, automate that, and so on. In general, tasks should have a time estimate and the effective time spent attached to it. Examples: Add route to DSP-API Add project members component to DSP-APP Add members list component to DSP-UI-LIB Add route to DSP-JS-LIB Add methods to DSP-PY-LIB Add unit tests to DSP-APP and DSP-UI-LIB Add feature documentation to DSP-DOCS Clean-up xy Add tests Bump version of library xyz","title":"Task template"},{"location":"research-development/youtrack-organization/#bug-template","text":"Bug Template for YouTrack issues ) Describes a user facing defect. Bugs are prioritized (e.g., high, normal, low) issues which describe a defect in the DaSCH Service Platform. These defects can affect either the current released version or the next major version in development. If a bug affects the current released (deployed) version of the platform, then it is immediately put on the board of the running sprint. Bugs with a high priority should be solved during the running sprint, while normal and low priority bugs can be moved to the next sprint if necessary. Any bugs moved to the next sprint should be re-prioritized to \u201chigh\u201d if they are not already, thus making sure that they are not pushed back again. With two weeks per sprint, a high priority bug should thus be solved in those two weeks. A normal or low priority bug moved to the next sprint will thus be solved at the latest in 4 weeks. A bugfix release can then be planned, which will incorporate only the bug fixes. If a bug affects the current development version, i.e., the next major version in development, then it should be put on the board by the team during regular Sprint Planning and solved before the next major version of the platform is released.","title":"Bug template"},{"location":"research-development/youtrack-organization/#subsystems","text":"The DaSCH Service Platform (DSP) consists of multiple subsystems. The subsystems usually live in their own Github repository. These are: DSP-API : https://github.com/dasch-swiss/dsp-api DSP-APP : https://github.com/dasch-swiss/dsp-app DSP-UI-LIB : https://github.com/dasch-swiss/dsp-ui-lib DSP-JS-LIB : https://github.com/dasch-swiss/dsp-js-lib DSP-TOOLS : https://github.com/dasch-swiss/dsp-tools DSP-DOCS : https://github.com/dasch-swiss/dsp-docs The DaSCH Service Platform has a global release schedule, for which then the individual subsystems need to be released. A user story consisting of tasks with hard dependencies (aka \u201cbreaking changes\u201d) can only be released as a whole. Tasks with soft dependencies (aka \u201cnon-breaking changes) can be released independently.","title":"Subsystems"},{"location":"research-development/youtrack-organization/#example","text":"Theme: Permissions Epic: Get and display permissions for a project (DSP-123) User Story: Display existing group permissions (incl. mockups) Task: Refactor hasPermissions object structure (Backend) Task: Get permissions from the API (Frontend) Task: Table view with groups and given permissions (Frontend) The organization between subsystems is done at the level of tasks as well as the dependencies. User Stories should be tagged with a future release, reflecting the global priorization.","title":"Example"}]}